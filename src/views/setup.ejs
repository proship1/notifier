<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <meta name="theme-color" content="#06C755">
    
    <!-- LIFF SDK -->
    <script charset="utf-8" src="https://static.line-scdn.net/liff/edge/2/sdk.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
            background: linear-gradient(135deg, #06C755 0%, #04A847 100%);
            min-height: 100vh;
            padding: 20px 16px;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            animation: slideUp 0.5s ease-out;
        }
        
        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .header {
            background: linear-gradient(135deg, #06C755 0%, #04A847 100%);
            padding: 30px 20px;
            text-align: center;
            color: white;
        }
        
        .header-icon {
            font-size: 48px;
            margin-bottom: 10px;
            animation: bounce 2s infinite;
        }
        
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            60% {
                transform: translateY(-5px);
            }
        }
        
        .header h1 {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 8px;
        }
        
        .header p {
            font-size: 16px;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px 20px;
        }
        
        .step {
            margin-bottom: 30px;
            opacity: 0;
            animation: fadeInUp 0.6s ease-out forwards;
        }
        
        .step:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .step:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .step-header {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .step-number {
            background: #06C755;
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 16px;
            margin-right: 12px;
        }
        
        .step-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }
        
        .input-group {
            position: relative;
        }
        
        .input-label {
            display: block;
            margin-bottom: 8px;
            color: #666;
            font-size: 14px;
        }
        
        .input-field {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 16px;
            background: #f8f9fa;
            transition: all 0.3s ease;
            outline: none;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        }
        
        .input-field:focus {
            border-color: #06C755;
            background: white;
            box-shadow: 0 0 0 3px rgba(6, 199, 85, 0.1);
        }
        
        .input-hint {
            font-size: 12px;
            color: #888;
            margin-top: 6px;
            display: flex;
            align-items: center;
        }
        
        .input-hint::before {
            content: "üí°";
            margin-right: 6px;
        }
        
        .paste-button {
            position: absolute;
            right: 12px;
            top: 36px;
            background: #06C755;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .paste-button:hover {
            background: #04A847;
            transform: scale(1.05);
        }
        
        .submit-button {
            width: 100%;
            background: linear-gradient(135deg, #06C755 0%, #04A847 100%);
            color: white;
            border: none;
            padding: 18px;
            border-radius: 12px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(6, 199, 85, 0.3);
        }
        
        .submit-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .success-message,
        .error-message {
            padding: 16px;
            border-radius: 12px;
            margin-top: 20px;
            font-weight: 600;
            text-align: center;
            display: none;
            animation: slideDown 0.5s ease-out;
        }
        
        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .success-message {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .error-message {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .validation-message {
            font-size: 12px;
            color: #dc3545;
            margin-top: 6px;
            display: none;
        }
        
        .input-field.invalid {
            border-color: #dc3545;
        }
        
        .input-field.valid {
            border-color: #28a745;
        }
        
        .valid-icon {
            position: absolute;
            right: 12px;
            top: 36px;
            color: #28a745;
            font-size: 18px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-icon">üöÄ</div>
            <h1>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</h1>
            <p>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 2 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
        </div>
        
        <div class="content">
            <form id="setupForm">
                <input type="hidden" name="token" value="<%= token %>">
                
                <div class="step">
                    <div class="step-header">
                        <div class="step-number">1</div>
                        <div class="step-title">‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (User ID)</div>
                    </div>
                    <div class="input-group">
                        <label class="input-label">‡∏ß‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</label>
                        <input type="text" id="userId" name="userId" class="input-field" placeholder="user-abc123..." autocomplete="off">
                        <button type="button" class="paste-button" onclick="pasteFromClipboard('userId')">‡∏ß‡∏≤‡∏á</button>
                        <div class="valid-icon">‚úì</div>
                        <div class="input-hint">‡∏£‡∏´‡∏±‡∏™‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "user-" ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</div>
                        <div class="validation-message" id="userId-error"></div>
                    </div>
                </div>
                
                <div class="step">
                    <div class="step-header">
                        <div class="step-number">2</div>
                        <div class="step-title">‡∏£‡∏´‡∏±‡∏™ API (API Key)</div>
                    </div>
                    <div class="input-group">
                        <label class="input-label">‡∏ß‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ API ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</label>
                        <input type="text" id="apiKey" name="apiKey" class="input-field" placeholder="eyJhbGci..." autocomplete="off">
                        <button type="button" class="paste-button" onclick="pasteFromClipboard('apiKey')">‡∏ß‡∏≤‡∏á</button>
                        <div class="valid-icon">‚úì</div>
                        <div class="input-hint">‡∏£‡∏´‡∏±‡∏™‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "eyJ" ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£</div>
                        <div class="validation-message" id="apiKey-error"></div>
                    </div>
                </div>
                
                <div class="step">
                    <button type="submit" class="submit-button" id="submitButton">
                        <div class="loading-spinner" id="loadingSpinner"></div>
                        <span id="buttonText">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                    </button>
                </div>
            </form>
            
            <div class="success-message" id="successMessage"></div>
            <div class="error-message" id="errorMessage"></div>
        </div>
    </div>
    
    <script>
        // Initialize LIFF
        async function initializeLiff() {
            try {
                await liff.init({ 
                    liffId: '<%= process.env.LIFF_ID || "dummy-liff-id" %>' 
                });
                
                if (liff.isLoggedIn()) {
                    console.log('User is logged in to LINE');
                }
            } catch (error) {
                console.log('LIFF initialization failed:', error);
                // Continue without LIFF - fallback to regular web view
            }
        }
        
        // Paste from clipboard
        async function pasteFromClipboard(fieldId) {
            try {
                const text = await navigator.clipboard.readText();
                document.getElementById(fieldId).value = text.trim();
                validateField(fieldId);
            } catch (error) {
                console.log('Clipboard access failed, showing manual paste prompt');
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î Ctrl+V (‡∏´‡∏£‡∏∑‡∏≠ Cmd+V ‡∏ö‡∏ô Mac) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
            }
        }
        
        // Validate individual field
        function validateField(fieldId) {
            const field = document.getElementById(fieldId);
            const value = field.value.trim();
            const errorElement = document.getElementById(fieldId + '-error');
            const validIcon = field.parentElement.querySelector('.valid-icon');
            
            let isValid = false;
            let errorMessage = '';
            
            if (fieldId === 'userId') {
                if (!value) {
                    errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
                } else if (!value.startsWith('user-')) {
                    errorMessage = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "user-"';
                } else if (value.length < 10) {
                    errorMessage = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
                } else {
                    isValid = true;
                }
            } else if (fieldId === 'apiKey') {
                if (!value) {
                    errorMessage = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ API';
                } else if (!value.startsWith('eyJ')) {
                    errorMessage = '‡∏£‡∏´‡∏±‡∏™ API ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "eyJ"';
                } else if (value.length < 50) {
                    errorMessage = '‡∏£‡∏´‡∏±‡∏™ API ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
                } else {
                    isValid = true;
                }
            }
            
            // Update UI
            field.className = 'input-field ' + (isValid ? 'valid' : (value ? 'invalid' : ''));
            
            if (isValid) {
                errorElement.style.display = 'none';
                validIcon.style.display = 'block';
            } else {
                errorElement.textContent = errorMessage;
                errorElement.style.display = value ? 'block' : 'none';
                validIcon.style.display = 'none';
            }
            
            return isValid;
        }
        
        // Show message
        function showMessage(type, message) {
            const successElement = document.getElementById('successMessage');
            const errorElement = document.getElementById('errorMessage');
            
            successElement.style.display = 'none';
            errorElement.style.display = 'none';
            
            if (type === 'success') {
                successElement.textContent = 'üéâ ' + message;
                successElement.style.display = 'block';
                
                // Auto-close after success
                setTimeout(() => {
                    if (typeof liff !== 'undefined' && liff.isInClient()) {
                        liff.closeWindow();
                    } else {
                        window.close();
                    }
                }, 3000);
            } else {
                errorElement.textContent = '‚ùå ' + message;
                errorElement.style.display = 'block';
            }
        }
        
        // Submit form
        document.getElementById('setupForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const userIdValid = validateField('userId');
            const apiKeyValid = validateField('apiKey');
            
            if (!userIdValid || !apiKeyValid) {
                showMessage('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                return;
            }
            
            const submitButton = document.getElementById('submitButton');
            const buttonText = document.getElementById('buttonText');
            const loadingSpinner = document.getElementById('loadingSpinner');
            
            // Show loading state
            submitButton.disabled = true;
            loadingSpinner.style.display = 'inline-block';
            buttonText.textContent = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...';
            
            try {
                const formData = new FormData(e.target);
                const response = await fetch(window.location.pathname, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        token: formData.get('token'),
                        userId: formData.get('userId').trim(),
                        apiKey: formData.get('apiKey').trim()
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage('success', result.message + '\n\n‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
                } else {
                    showMessage('error', result.error);
                }
            } catch (error) {
                console.error('Submit error:', error);
                showMessage('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
            } finally {
                // Reset button state
                submitButton.disabled = false;
                loadingSpinner.style.display = 'none';
                buttonText.textContent = 'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            }
        });
        
        // Add real-time validation
        document.getElementById('userId').addEventListener('input', () => validateField('userId'));
        document.getElementById('apiKey').addEventListener('input', () => validateField('apiKey'));
        
        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            initializeLiff();
        });
    </script>
</body>
</html>